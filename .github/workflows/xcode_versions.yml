name: Get Xcode Versions

on:
  workflow_call:
    outputs:
      xcode_versions:
        description: "Xcode versions"
        value: ${{ jobs.get-xcode-versions.outputs.xcode-versions }}

jobs:
  get-xcode-versions:
    runs-on: macos-14
    outputs:
      xcode-versions: ${{ steps.get-versions.outputs.result }}
    steps:
      - name: Get Xcode versions
        id: get-versions
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { execSync } = require('child_process');
            execSync('npm install semver', { stdio: 'inherit' });
            execSync('npm install plist', { stdio: 'inherit' });
            const fs = require('fs');
            const path = require('path');
            const semver = require('semver');
            const plist = require('plist');

            function parsePlistFile(plistPath) {
              if (!fs.existsSync(plistPath)) {
                return null;
              }
              const plistRawContent = fs.readFileSync(plistPath, "utf8");
              return plist.parse(plistRawContent);
            }

            function getInstalledXcodeApps() {
              const applicationsDirectory = "/Applications";
              const xcodeAppFilenameRegex = /^Xcode.*\.app$/;
              const allApplicationsChildItems = fs.readdirSync(applicationsDirectory, {
                encoding: "utf8",
                withFileTypes: true,
              });
              const allApplicationsRealItems = allApplicationsChildItems.filter(
                child => !child.isSymbolicLink() && child.isDirectory(),
              );
              const xcodeAppsItems = allApplicationsRealItems.filter(app =>
                xcodeAppFilenameRegex.test(app.name),
              );
              return xcodeAppsItems.map(child => path.join(applicationsDirectory, child.name));
            }

            function getXcodeReleaseType(xcodeRootPath) {
              const licenseInfo = parsePlistFile(
                path.join(xcodeRootPath, "Contents", "Resources", "LicenseInfo.plist"),
              );
              const licenseType = licenseInfo?.licenseType?.toString()?.toLowerCase();
              if (!licenseType) {
                return "Unknown";
              }
              return licenseType.includes("beta") ? "Beta" : "GM";
            }

            function getXcodeVersionInfo(xcodeRootPath) {
              const versionInfo = parsePlistFile(path.join(xcodeRootPath, "Contents", "version.plist"));
              const xcodeVersion = semver.coerce(versionInfo?.CFBundleShortVersionString?.toString());
              const xcodeBuildNumber = versionInfo?.ProductBuildVersion?.toString();
              if (!xcodeVersion || !semver.valid(xcodeVersion)) {
                return null;
              }
              const releaseType = getXcodeReleaseType(xcodeRootPath);
              return {
                version: xcodeVersion.version,
                buildNumber: xcodeBuildNumber,
                releaseType: releaseType,
                stable: releaseType === "GM",
                path: xcodeRootPath,
              };
            }

            const potentialXcodeApps = getInstalledXcodeApps().map(appPath =>
              getXcodeVersionInfo(appPath),
            );
            const xcodeVersions = potentialXcodeApps.filter(app => !!app);
            const versions = xcodeVersions.map(version => 
              version.stable ? version.version : `${version.version}-beta`
            );
            return JSON.stringify(versions);
